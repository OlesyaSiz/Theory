 Что такое тестовая среда?
Тестовая среда - это настройка программного и аппаратного обеспечения для тестирования. Настройка правильной тестовой среды гарантирует успех тестирования ПО. Любые недостатки в этом процессе могут привести к дополнительным затратам и времени для клиента. В настройке тестовой среды учавствуют системные администраторы, разработчики, тестировщики.


 В чем отличие build от release?
Build - это номер, который дается ПО при передаче от разработчиков тестировщикам. Release — это номер, который дается ПО при передаче конечному пользователю.


 Основные фазы тестирования?
1) Модульное тестирование -  тестируются отдельные модули или компоненты ПО;
2) Интеграционное тестирование - отдельные программные модули объединяются и тестируются в группе;
3) Системное тестирование -  тестирование, выполняемое на полной, интегрированной системе, с целью проверки соответствия системы исходным требованиям, как функциональным, так и не функциональным;
4) Регрессионное тестирование - тестирование направлено на проверку изменений, сделанных в приложении или в окружающей среде для подтверждения того, что существующая ранее функциональность работает как прежде;
5) Приемочное тестирование - тестирование проводится на этапе сдачи готового продукта или его части заказчику. Цель приемочного тестирования - проверка готовности продукта, которая достигается путем прохода тестовых сценариеви случаев, которые построены на основе спецификации требований к разрабатываемому ПО. 




 Критерии выбора тестов?
1) Достаточность - критерий должен показывать, когда некоторое конечное множество тестов достаточно для тестирования данной программы;
2) Полнота - в случае ошибки должен существовать тест из множества тестов, удовлетворяющих критерию, который раскрывает ошибку;
3) Надежность - любые два множества тестов, удовлетворяющих ему, одновременно должны раскрывать или не раскрывать ошибки программы;
4) Проверяемость - критерий должен быть легко проверяемым, например, вычисляемым на тестах.


 Принципы тестирования?
1) Тестирование показывает наличие дефектов - тестирование может показать наличие дефектов в программе, но не доказать их отсутствие. Важно составлять тест-кейсы, которые будут находить как можно больше багов.
2) Исчерпывающее тестирование невозможно - невозможно провести исчерпывающее тестирование, которое бы покрывало все комбинации пользовательского ввода и состояний системы. Необходимо использовать анализ рисков и расстановку приоритетов, что позволит более эффективно распределять усилия по обеспечению качества ПО.
3) Раннее тестирование - тестирование должно начинаться как можно раньше в жизненном цикле разработки программного обеспечения.
4) Скопление дефектов - разные модули системы могут содержать разное количество дефектов, плотность скопления дефектов в разных элементах программы может отличаться. Усилия по тестированию должны распределяться пропорционально фактической плотности дефектов. 
5) Парадокс пестицида - когда одни и те же тесты прогоняются снова и снова, они находят все меньше новых ошибок. Поскольку система эволюционирует, многие из ранее найденных дефектов исправляют и старые тест-кейсы больше не срабатывают. Нужно периодически вносить изменения в используемые наборы тестов.
6) Тестирование зависит от контекста - выбор методологии, техники и типа тестирования будет напрямую зависеть от природы самой программы. 
7) Заблуждение об отсутствии ошибок - если тестирование не обнаружило дефектов, еще не значит, что программа готова к релизу.


 Что такое независимое тестирование?
Независимое тестирование - это тестирование с помощью превлеченной группы людей или компании, которые не учавствую в разработке ПО.



  Что такое тестирование со сдвигом влево?
Это подход к тестированию программного обеспечения и системного тестирования, при котором тестирование выполняется на более ранней стадии жизненного цикла.



 Почему тестирование делится на отдельные этапы?
Производительность и качество тестирования улучшаются с помощью поэтапного тестирования



 Какие есть этапы тестирования?
1) Работа с требованиями - знакомство с требованиями заказчика, что должен из себя представлять итоговый продукт, обсуждение.
2) Разработка стратегии тестирования - оценка сроков тестирования, выявление среды тестирования, объединение всей информации, полученной при работе с требованиями.
3) Создание тестовой документации - написание сценариев, которые позволят проверить функционал.
4) Тестирование прототипа - тестирование основного функционала продукта, корректировка целей, добавление фичей.
5) Основное тестирование - выполнение общей проверки продукта.
6) Стабилизация - на данном этапе происходит работа над устранением багов.
7) Эксплуатация - проводится регресс-тестирование, устранение ошибок, которые нашел конечный пользователь.



  Как тестировать продукт, если требования еще не зафиксированы?
Если спецификация требований отсутствует по каким-то причинам, то план тестирования можеть быть сделан на основе предположений относительно продукта. Все предположения нужно задокументировать в плане тестирования.



 Как узнать, было ли создано достаточно тестов для тестирования продукта?
Если каждое требование охватывает хотя бы один тест-кейс, то можно сделать вывод, что тестов достаточно.



 Что подразумевается под тестовыми данными? 
Это входные значения для выполнения тест-кейсов. Данные определяют в соответствии с требованиями.



 Что такое бета-тестирование?
Это тестирование готового продукта группой конечных пользователей.



 Что такое пилотное тестирование? 
Это тип тестирования, который проверяет компонент системы или всю систему в режиме реального времени. Его цель - оценка осуществимости, времени, стоимости, риска и эффективности исследовательского проекта.



 Что такое бизнес – логика?
Это то, что программа делает с точки зрения пользователей. Это правила, которые должны соблюдаться в данной конкретной программе, определенные бизнес-клиентом.



 Какие существуют основные виды тестирования ПО?
1) Функциональные виды:
   Функциональное тестирование; 
   Тестирование взаимодействия;
2) Нефункциональное:
   Производительности: 
      Тестирование емкости/способностей 
      Стрессовое 
      Нагрузочное 
      Объемное тестирование 
      Выносливости 
      Стабильности/надежности 
      Шиповое 
      Отказоустойчивости 
      Масштабируемости; 
  Отказ и восстановление; 
  Удобство пользования; 
  Тестирование установки; 
  Тестирование безопасности; 
  Конфигурационное;
3) Связанное с изменениями:
   Регрессионное; 
   Санитарное; 
   Дымовое; 
   Тестирование сборки. 





 Методы тестирования?
1) Метод "Чёрного ящика" - мы не знаем, как внутри устроена тестируемая система. Тестирование основано на работе с внешними интерфейсами тестируемой системы.
2) Метод "Белого ящика" - внутреннее устройство, структра, реализация системы известны тестировщику. Мы выбираем входные значения, основываясь на знании кода, которй будет их обрабатывать
3) Метод "Серого ящика" - внутреннее устройство программы нам известно частично.



 Что такое пирамида / уровни тестирования?
«Пирамида тестов» — абстракция, которая означает группировку тестов программного обеспечения по разным уровням детализации.
Она даёт представление, сколько тестов должно быть в каждой из этих групп. Чем выше уровень, тем меньше тестов. (юнит-тестирование--->тестирование API--->функциональное тестирование).



 Что такое негативное тестирование? 
Это тип тестирования ПО, для поиска точек отказа в программном обеспечении, который проверяет систему на обработку исключительных ситуаций (срабатывание валидаторов на некорректные данные), а также проверяет, что вызываемая приложением функция не выполняется при срабатывании валидатора. Целью отрицательного тестирования является предотвращение сбоя приложений из-за некорректных входных данных. Мы должны убедиться, что наша система может справиться с непредвиденными условиями, чтобы обеспечить 100% безошибочную систему.



 Что такое позитивное тестирование? 
Это тип тестирования программного обеспечения, который включает в себя правильное взаимодействие с программным обеспечением. Это дает ожидаемые результаты и доказывает, что программное обеспечение ведет себя так, как ожидалось.




 Что такое интеграционное тестирование?
Интеграционное тестировнаие - это проверка, на сколько хорошо два и более модулей системы взаимодействуют друг с другом, а также проверяются взаимодействия с различнами частями системы  (операционной системой, оборудованием либо связи между различными системами).



 Разница между юнит-тестированием и интеграционным тестированием?
Интеграционные тесты показывают, что не работает. Но они бесполезны в догадках, где может быть проблема.
Модульные тесты являются единственными тестами, которые говорят, где именно ошибка. Это тестирование методов какого-то класса программы в изоляции от остальной программы.




 В чем разница между тестовым драйвером и тестовой заглушкой? 
Тестовый драйвер - это фрагмент кода, который вызывает тестируемый программный компонент (это полезно при тестировании по принципу «снизу-вверх»).Тестовая заглушка - это фиктивная программа, которая интегрируется с приложением для полной функциональности. 


 Что подразумевается под системным тестированием?
Основная задача системного тестирования - выявление дефектов, связанных с работой системы в целом, таких, как: неверное использование ресурсов системы, непредусмотренные комбинации данных пользовательского уровня, несовместимость с окружением, непредусмотренные сценарии использования, отсутствующая или неверная функциональность, неудобство в применении и тому подобное.
Системное тестирование производится над проектом в целом с помощью метода черного ящика.




 Что такое функциональное тестирование?
Это тип тестирования программного обеспечения, который проверяет программную систему на соответствие функциональным требованиям/спецификациям. Цель функциональных тестов состоит в том, чтобы проверить каждую функцию программного приложения, предоставляя соответствующий ввод, проверяя выход в соответствии с функциональными требованиями.
Функциональное тестирование в основном включает тестирование черного ящика и не касается исходного кода приложения.



  Что такое тестирование совместимости/взаимодействия? 
Это функциональное тестирование, проверяющее способность приложения/устройства взаимодействовать с одним и более компонентами/системами/устройствами, и включающее в себя тестирование совместимости и интеграционное тестирование.
ПО с хорошими характеристиками взаимодействия может быть легко интегрировано с другими системами, не требуя каких-либо серьезных модификаций. 





 Что такое нефункциональное тестирование?
Это тип тестирования ПО для проверки нефункциональных аспектов ПО. Оно предназначено для проверки готовности системы по нефункциональным параметрам, которые никогда не учитываются при функциональном тестировании.



 Что таоке тестирование удобства пользования?
Тестирование удобства пользования - это метод тестирования, направленный на установление степени удобства использования, обучаемости, понятности и привлекательности для пользователей разрабатываемого продукта в контексте заданных условий.
Тестирование удобства пользования дает оценку уровня удобства использования приложения по следующим пунктам:
производительность, эффективность - сколько времени и шагов понадобится пользователю для завершения основных задач приложения
правильность - сколько ошибок сделал пользователь во время работы с приложением
активизация в памяти – как много пользователь помнит о работе приложения после приостановки работы с ним на длительный период времени
эмоциональная реакция  – как пользователь себя чувствует после завершения задачи - растерян, испытал стресс Порекомендует ли пользователь систему своим друзьям



 Отличия тестирование на удобство пользования и тестирования доступности? 
Тестирование на удобство пользования показывает, насколько проста в использовании и удобна система программного обеспечения. Основное внимание в этом тестировании уделяется простоте использования приложения пользователем, гибкости в управлении средствами управления и способности системы выполнять свои задачи. Это также называется тестированием пользовательского опыта.
Тестирование доступности - это подмножество юзабилити-тестирования. Его цель - убедиться в том, что наш продукт удобен в использовании для людей с различными видами инвалидности или особенностей восприятия. Это могут быть проблемы со зрением, слухом или ограничения в подвижности рук.



 Что такое тестирование интерфейса?
Это тип интеграционного теста, который проверяет, правильно ли установлена ​​связь между двумя различными программными системами или их частями (модулями). Соединение, которое объединяет два компонента, называется интерфейсом. Этот интерфейс в компьютерном мире может быть чем угодно, как API, так и веб-сервисами и т. д.  Тестирование этих подключаемых сервисов или интерфейса называется тестированием интерфейса.
Тестирование интерфейса включает в себя тестирование двух основных сегментов:
1) Интерфейс веб-сервера и сервера приложений
2) Интерфейс сервера приложений и базы данных



 Что такое тестирование рабочего процесса? 
Это тип тестирования программного обеспечения, который проверяет, что каждый рабочий процесс точно отражает данный бизнес-процесс. Рабочий процесс - это серия задач для получения желаемого результата, которая обычно включает несколько этапов или шагов. Для любого бизнес-процесса тестирование этих последовательных шагов определяется как тестирование рабочего процесса.
Тестирование рабочего процесса проводится поэтапно:
1) Начальная фаза: эта фаза включает начальное планирование испытаний и тестирование прототипа
2) Фаза разработки: эта фаза включает базовую архитектуру тестирования
3) Фаза строительства: эта фаза включает в себя значительные испытания в каждой сборке
4) Фаза перехода: эта фаза включает в себя регрессионные тесты и повторные тесты исправлений




 Что такое пользовательское приемочное тестирование? 
Это тип тестирования, которое выполняется конечным пользователем для проверки ПО перед продакшеном.Такое тестирование выполняется на заключительном этапе тестирования, после системных, функцирональных, интеграционных испытаний.



 Что такое эксплуатационное приемочное тестирование? 
Эксплуатационное приемочное тестирование обычно выполняется пользователем и/или сотрудниками с администраторским доступом, в рабочей среде (возможно, симулированой), фокусируясь на функциональных аспектах. Например, восстанавливаемость, поведение ресурсов, устанавливаемость и техническое соответствие.



 Что такое инсталляционное тестирование (тестирование установки)?
Это проверка успешной установки и настройки обновления или удаления ПО, как десктопного, так и мобильного.



 Что такое тестирование безопасности?
Это тип тестирования ПО, который выявляет уязвимости, угрозы и риски. Целью тестов безопасности является выявление всех возможных лазеек и слабых мест в ПО, которые могут привести к потере информации, доходов, репутации компании, сотрудников или клиентов. 

 Что такое дымовое тестирование (смоук тестирование)?
Это минимальный набор тестов на явные ошибки. Не проходившую этот тест программу не имеет смысла отдавать на более глубокое тестирование.

 Что такое тестирование N+1?
Это вариант регрессионного тестирования. Этот метод тестирования выполняется в несколько циклов, в котором ошибки, найденные в цикле N устраняются и тестируются в тестовом цикле N+1, до тех по, пока не будет ни одной ошибки.


 Что такое тестирование документации?
Это тестирование артефактов, разработанных до, во время и после тестирования продукта. Это нефункциональный тип тестирования программного обеспечения. Дефекты, обнаруженные на этапе тестирования, более дорогостоящие, чем если бы они были обнаружены на этапе требований. Стоимость исправления ошибки увеличивается тем больше, чем позже мы ее найдем. Тестирование документации может начаться с самого начала процесса разработки программного обеспечения, чтобы сэкономить большую сумму денег. (тестирование требований, чек-лист, тест-кейс)


 Что таоке сквозное тестирование?
Сквозное тестирование - это стратегия тестирования для выполнения тестов, которые охватывают все возможные потоки приложения от его начала до конца; проверяет программную систему вместе с ее интеграцией с внешними интерфейсами. Современные программные системы являются сложными и взаимосвязаны с несколькими подсистемами. Подсистема может отличаться от текущей системы или может принадлежать другой организации. Если какая-либо из подсистем выйдет из строя, вся система программного обеспечения может рухнуть.

 Что такое AdHock тестирование?
Это вид тестирования, который выполняется без подготовки к тестированию продукта, без определения ожидаемых результатов, проектирования тестовых сценариев. Это импровизационное тестирование. Оно не требует никакой документации, планирования, процессов, которых следует придерживаться при выполнении тестирования. Такой способ тестирования в большинстве случаев дает большее количество заведенных отчётов об ошибке.  Это обусловлено тем, что тестировщик на первых шагах приступает к тестированию основной функциональной части продукта и выполняет как позитивные, так и негативные варианты возможных сценариев.


 Что такое дефект?
Разница между ожидаемым и фактическим результатом.











