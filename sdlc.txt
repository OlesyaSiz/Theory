Жизненный цикл разработки программного обеспечения (Software development lifecycle (SDLC)) — это методология, которая описывает, как вам следует подходить к разработке программного обеспечения. 
Жизненный цикл разработки программного обеспечения важен при разработке проекта, потому что он позволяет каждому в команде проекта — от менеджеров до разработчиков — отслеживать проект. 
Жизненный цикл разработки программного обеспечения обычно контролируется менеджером проекта, который обеспечивает достижение разработчиками своих целей.

Этапы:
1) Определение
Этот этап SDLC означает получение информации от всех заинтересованных сторон, таких как клиенты, сотрудники, программисты и т.д.

2) Анализ и планирование
На этом этапе команда определяет требования к новому программному обеспечению, а также анализирует стоимость, требуемую для него.
Также детализирует риски и предоставляет подпланы для смягчения этих рисков. На этом этапе создается документ спецификации требований к программному обеспечению. Планирование, связанное с обеспечением качества и связанными с ним рисками, также выполняется на начальных этапах. 
Минимальный риск учитывается. Следующим шагом является четкое определение требований к продукту. Утверждение принимается от клиента или путем анализа рынка. Все это обычно делается с помощью документа SRS (Спецификация требований к программному обеспечению), который содержит все требования проекта и спроектирован и разработан в течение жизненного цикла проекта.

3) Дизайн
Эта фаза определяет элементы системы, компоненты, уровень безопасности, модули, архитектуру, различные интерфейсы и типы данных, которыми оперирует система. Дизайн системы в общих чертах может быть сделан ручкой на листке бумаги - он определяет, как система будет выглядеть и как функционировать.  Как правило, в спецификации DDS - Design Document предлагается более одного подхода к проектированию архитектуры продукта.

4) Разработка и развертывание
Все фактическое кодирование выполняется на этом этапе SDLC. 

5) Тестирование
На этом этапе мы проверяем наличие дефектов и недостатков. После обнаружения, мы пытаемся решить все проблемы, пока продукт не будет соответствовать действующим спецификациям.

6) Эксплуатация и интеграция
Этот шаг включает в себя обратную связь от конечных пользователей. В зависимости от их обратной связи нужно сделать изменения и корректировки.

7) Поддержка
На этой фазе осуществляется периодическая техническая поддержка системы, чтобы убедиться, что система не устарела. Сюда входит замена старого оборудования и постоянная оценка производительности. Также здесь осуществляются апдейты определенных компонентов с целью удостовериться, что система отвечает нужным стандартам и новейшим технологиям, чтобы не быть подверженной текущим угрозам безопасности. 

Модели SDLC.
Наиболее важные и популярные модели SDLC, используемые в отрасли:

Модель водопада  (Waterfall model)
Инкрементальная модель (Incremental model)
Итерационная модель (Iterative Model)
Спиральная модель (Spiral model)
V-модель (V-model)
Гибкая модель (Agile model)
Модель большого взрыва
RAD Model (rapid application development model - быстрая разработка приложений)

Модель водопада  (Waterfall model) - одна из самых старых, подразумевает последовательное прохождение стадий, каждая из которых должна завершиться полностью до начала следующей. В модели Waterfall легко управлять проектом. Благодаря её жесткости, разработка проходит быстро, стоимость и срок заранее определены. Каскадная модель будет давать отличный результат только в проектах с четко и заранее определенными требованиями и способами их реализации. Нет возможности сделать шаг назад, тестирование начинается только после того, как разработка завершена или почти завершена. Продукты, разработанные по данной модели без обоснованного ее выбора, могут иметь недочеты (список требований нельзя скорректировать в любой момент), о которых становится известно лишь в конце из-за строгой последовательности действий. Стоимость внесения изменений высока, так как для ее инициализации приходится ждать завершения всего проекта.

Когда использовать каскадную методологию:
Только тогда, когда требования известны, понятны и зафиксированы. Противоречивых требований не имеется;
В относительно небольших проектах.


V-модель (V-model) - унаследовала структуру «шаг за шагом» от каскадной модели. V-образная модель применима к системам, которым особенно важно бесперебойное функционирование. Особенностью модели можно считать то, что она направлена на тщательную проверку и тестирование продукта, находящегося уже на первоначальных стадиях проектирования. Стадия тестирования проводится одновременно с соответствующей стадией разработки, например, во время кодирования пишутся модульные тесты.

Когда использовать V-модель:
Если требуется тщательное тестирование продукта, то V-модель оправдает заложенную в себя идею: validation and verification;
Для малых и средних проектов, где требования четко определены и фиксированы.


Инкрементальная модель (Incremental model) - в инкрементной модели полные требования к системе делятся на различные сборки. Терминология часто используется для описания поэтапной сборки ПО. Имеют место несколько циклов разработки, и вместе они составляют жизненный цикл «мульти-водопад». Цикл разделен на более мелкие легко создаваемые модули. Каждый модуль проходит через фазы определения требований, проектирования, кодирования, внедрения и тестирования. Процедура разработки по инкрементной модели предполагает выпуск на первом большом этапе продукта в базовой функциональности, а затем уже последовательное добавление новых функций, так называемых «инкрементов». Процесс продолжается до тех пор, пока не будет создана полная система.

Когда использовать инкрементную модель:
Когда основные требования к системе четко определены и понятны. В то же время некоторые детали могут дорабатываться с течением времени;
Требуется ранний вывод продукта на рынок;
Есть несколько рисковых фич или целей.


RAD Model (rapid application development model - быстрая разработка приложений) - разновидность инкрементной модели. В RAD-модели компоненты или функции разрабатываются несколькими высококвалифицированными командами параллельно, будто несколько мини-проектов. Временные рамки одного цикла жестко ограничены. Созданные модули затем интегрируются в один рабочий прототип. Синергия позволяет очень быстро предоставить клиенту для обозрения что-то рабочее с целью получения обратной связи и внесения изменений.
Модель быстрой разработки приложений включает следующие фазы:
Бизнес-моделирование: определение списка информационных потоков между различными подразделениями.
Моделирование данных: информация, собранная на предыдущем этапе, используется для определения объектов и иных сущностей, необходимых для циркуляции информации.
Моделирование процесса: информационные потоки связывают объекты для достижения целей разработки.
Сборка приложения: используются средства автоматической сборки для преобразования моделей системы автоматического проектирования в код.
Тестирование: тестируются новые компоненты и интерфейсы
Может использоваться только при наличии высококвалифицированных и узкоспециализированных архитекторов. Бюджет проекта большой, чтобы оплатить этих специалистов вместе со стоимостью готовых инструментов автоматизированной сборки. RAD-модель может быть выбрана при уверенном знании целевого бизнеса и необходимости срочного производства системы в течение 2-3 месяцев.

Гибкая модель (Agile model) - в «гибкой» методологии разработки после каждой итерации заказчик может наблюдать результат и понимать, удовлетворяет он его или нет. Это одно из преимуществ гибкой модели. К ее недостаткам относят то, что из-за отсутствия конкретных формулировок результатов сложно оценить трудозатраты и стоимость, требуемые на разработку.
В основе такого типа — непродолжительные ежедневные встречи — «Scrum» и регулярно повторяющиеся собрания (раз в неделю, раз в две недели или раз в месяц), которые называются «Sprint». На ежедневных совещаниях участники команды обсуждают:
отчёт о проделанной работе с момента последнего Scrum’a;
список задач, которые сотрудник должен выполнить до следующего собрания;
затруднения, возникшие в ходе работы.
Методология подходит для больших или нацеленных на длительный жизненный цикл проектов, постоянно адаптируемых к условиям рынка. Соответственно, в процессе реализации требования изменяются.

Когда использовать Agile:
Когда потребности пользователей постоянно меняются в динамическом бизнесе;
Изменения на Agile реализуются за меньшую цену из-за частых инкрементов;
В отличие от модели водопада, в гибкой модели для старта проекта достаточно лишь небольшого планирования.

Итерационная модель (Iterative Model) - итерационная модель жизненного цикла не требует для начала полной спецификации требований. Вместо этого, создание начинается с реализации части функционала, становящейся базой для определения дальнейших требований. Этот процесс повторяется. Версия может быть неидеальна, главное, чтобы она работала. Понимая конечную цель, мы стремимся к ней так, чтобы каждый шаг был результативен, а каждая версия — работоспособна.

Когда оптимально использовать итеративную модель:
Требования к конечной системе заранее четко определены и понятны;
Проект большой или очень большой;
Основная задача должна быть определена, но детали реализации могут эволюционировать с течением времени.

Спиральная модель (Spiral model) - похожа на инкрементную, но с акцентом на анализ рисков. Она хорошо работает для решения критически важных бизнес-задач, когда неудача несовместима с деятельностью компании, в условиях выпуска новых продуктовых линеек, при необходимости научных исследований и практической апробации.

Спиральная модель предполагает 4 этапа для каждого витка:
планирование;
анализ рисков;
конструирование;
оценка результата и при удовлетворительном качестве переход к новому витку.

Модель большого взрыва -  это модель, в которой мы не следуем никаким конкретным процессам. Разработка только начинается с необходимых денег и усилий в качестве входных данных, а результатом является разработанное программное обеспечение, которое может соответствовать или не соответствовать требованиям заказчика. Эта модель Большого взрыва не соответствует процессу / процедуре, и требуется очень мало планирования. Даже заказчик не уверен, что именно он хочет, и требования выполняются на лету без особого анализа.
Обычно эта модель используется для небольших проектов, где команды разработчиков очень малы.

